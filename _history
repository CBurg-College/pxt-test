{"entries":[{"timestamp":1757668350651,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":298,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":148,"diffs":[[1,""]]},{"start1":1,"length1":33,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":227,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1757668667042,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"basic.showString(\"G\")\nbasic.showNumber(1)\nbasic.pause(500)\nbasic.showString(\"W\")\nbasic.showNumber(3)\nbasic.pause(500)\nbasic.showIcon(IconNames.Yes)\n"]]},{"start1":149,"length1":647,"diffs":[[1,"basic.forever(function () {\n\t\n"]]}]}]},{"timestamp":1757670110705,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1757670116747,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":38,"diffs":[[1,""]]},{"start1":1,"length1":0,"diffs":[[1,"\nfunction display() {\n    basic.showNumber(GROUP)\n    basic.pause(500)\n    if (displayHandler) displayHandler()\n    else basic.showIcon(IconNames.Yes)\n}\n\ndisplay()\n\n"]]},{"start1":211,"length1":232,"diffs":[[1,"    let tm = control.millis() + 3000\n    control.inBackground(() => {\n        while (TIMER && (tm > control.millis())) { }\n        if (TIMER) display()\n        else basic.showNumber(GROUP)\n    })\n"]]}]}]},{"timestamp":1757670714843,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":39,"length1":14,"diffs":[[1,"let TIMER = false\n"]]},{"start1":112,"length1":37,"diffs":[[1,"    let tm = control.millis() + 5000\n    while (TIMER && (tm > control.millis()))\n        basic.pause(1)\n    if (tm > control.millis()) basic.showIcon(IconNames.Yes)\n    else basic.showIcon(IconNames.No)\n"]]},{"start1":319,"length1":130,"diffs":[[1,""]]},{"start1":539,"length1":17,"diffs":[[1,""]]}]}]},{"timestamp":1757671312479,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":39,"length1":63,"diffs":[[1,"let TIMER = 0\n"]]},{"start1":54,"length1":131,"diffs":[[1,"function displayTimer() {\n"]]},{"start1":108,"length1":243,"diffs":[[1,"    let tm = control.millis() + 3000\n"]]},{"start1":148,"length1":0,"diffs":[[1,"control.inBackground(() => {\n    while (TIMER && (TIMER > control.millis())) { }\n    if (TIMER) basic.showIcon(IconNames.Yes)\n})\n\n"]]},{"start1":403,"length1":39,"diffs":[[1,"    // stop display timer\n    TIMER = false\n    basic.pause(10)\n    // start new display TIMER\n    TIMER = true\n    displayTimer()\n"]]}]}]},{"timestamp":1757671785399,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":39,"length1":63,"diffs":[[1,"const TIMERID = 200 + Math.randomRange(0, 100); // semi-unique\n"]]},{"start1":161,"length1":38,"diffs":[[1,""]]},{"start1":199,"length1":0,"diffs":[[1,"    \n    const timerTimeout1 = 1;\n\n"]]},{"start1":262,"length1":0,"diffs":[[1,"\n    control.onEvent(TIMERID, 0, function () {\n        control.inBackground(() => {\n            d()\n        })\n    })\n\n"]]},{"start1":633,"length1":36,"diffs":[[1,"    control.raiseEvent(TIMERID, 3000);\n"]]}]}]},{"timestamp":1757672267845,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":102,"length1":20,"diffs":[[1,""]]},{"start1":161,"length1":42,"diffs":[[1,"control.onEvent(EVENTID, 0, display)\n\nfunction displayTimer(time: number) {\n"]]},{"start1":298,"length1":144,"diffs":[[1,"        while (true) {\n            \n            basic.pause(time * 1000);\n        }\n"]]},{"start1":389,"length1":3,"diffs":[[1,"}\n"]]},{"start1":450,"length1":18,"diffs":[[1,""]]}]}]},{"timestamp":1757672831561,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":223,"length1":0,"diffs":[[1,"    basic.showNumber(GROUP)\n    control.inBackground(() => {\n"]]},{"start1":346,"length1":64,"diffs":[[1,"        while (TIMER && (tm > control.millis())) { }\n        if (TIMER) display()\n    })\n"]]},{"start1":497,"length1":0,"diffs":[[1,"    TIMER = false\n"]]},{"start1":582,"length1":28,"diffs":[[1,""]]}]}]},{"timestamp":1757673592640,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":545,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1757673594840,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":546,"length1":222,"diffs":[[1,""]]}]}]},{"timestamp":1757674170251,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":223,"length1":142,"diffs":[[1,"        let tm = control.millis() + 2000\n        TIMER = true\n        while (tm > control.millis()) { }\n"]]},{"start1":545,"length1":0,"diffs":[[1,"\nlet cnt = 0\nloops.everyInterval(1000, () => {\n    cnt++\n    if (cnt > 9) cnt = 1\n    basic.showNumber(cnt)\n})\n\nloops.everyInterval(4000, () => {\n    music.ringTone(Note.C)\n    basic.pause(200)\n    music.stopAllSounds()\n})\n"]]}]}]},{"timestamp":1757674768377,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":102,"length1":35,"diffs":[[1,"let   TIMER = false\n"]]},{"start1":181,"length1":12,"diffs":[[1,""]]},{"start1":223,"length1":16,"diffs":[[1,""]]},{"start1":260,"length1":119,"diffs":[[1,"    while (TIMER && (tm > control.millis())) { }\n        basic.showIcon(IconNames.Yes)\n"]]},{"start1":365,"length1":17,"diffs":[[1,"        TIMER = false\n"]]},{"start1":449,"length1":38,"diffs":[[1,""]]},{"start1":544,"length1":17,"diffs":[[1,""]]}]}]},{"timestamp":1757675313380,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":250,"length1":153,"diffs":[[1,"    BUSY = true\n    let tm = control.millis() + 2000\n    while (TIMER && (tm > control.millis())) { pause(1)}\n    if (tm <= control.millis()) basic.showIcon(IconNames.Yes)\n    TIMER = false\n    BUSY = false\n"]]},{"start1":519,"length1":0,"diffs":[[1,"    TIMER = false\n    while (BUSY) {}\n"]]},{"start1":624,"length1":50,"diffs":[[1,"    basic.showNumber(GROUP)\n"]]},{"start1":669,"length1":35,"diffs":[[1,"    control.raiseEvent(EVENTID, 0);\n"]]},{"start1":708,"length1":68,"diffs":[[1,""]]}]}]},{"timestamp":1757675909960,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":196,"length1":0,"diffs":[[1,"let cnt = 0\n"]]},{"start1":283,"length1":192,"diffs":[[1,"        basic.showIcon(IconNames.Yes)\n        while (TIMER) basic.pause(1)\n        basic.showIcon(IconNames.Yes)\n"]]},{"start1":532,"length1":52,"diffs":[[1,""]]},{"start1":582,"length1":0,"diffs":[[1,"    TIMER = true\n    control.raiseEvent(EVENTID, 0)\n"]]}]}]},{"timestamp":1757676503405,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":102,"length1":17,"diffs":[[1,"let TIMER = false\nlet BUSY = false\n"]]},{"start1":193,"length1":57,"diffs":[[1,""]]},{"start1":271,"length1":19,"diffs":[[1,""]]},{"start1":397,"length1":52,"diffs":[[1,"        if (!TIMER) basic.showIcon(IconNames.Yes)\n        TIMER--\n"]]},{"start1":599,"length1":0,"diffs":[[1,"    TIMER = true\n"]]},{"start1":654,"length1":0,"diffs":[[1,"\ninput.onButtonPressed(Button.A, function () {\n})\n\ninput.onButtonPressed(Button.B, function () {\n    TIMER = false\n})\n"]]}]}]},{"timestamp":1757677033160,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"let GROUP = 1\nbasic.showNumber(GROUP)\n\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\nlet EVENTCNT = 0\n\nfunction display() {\n    basic.showIcon(IconNames.Yes)\n    basic.pause(500)\n    basic.showIcon(IconNames.Heart)\n}\n\ncontrol.onEvent(EVENTID, 0, function () {\n    control.inBackground(() => {\n        EVENTCNT++\n        basic.showNumber(GROUP)\n        let tm = control.millis() + 3000\n        while (tm > control.millis()) basic.pause(1)\n        EVENTCNT--\n        if (!EVENTCNT) display()\n    })\n})\n\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    GROUP++\n    if (GROUP > 9) GROUP = 1\n    radio.setGroup(GROUP)\n    control.raiseEvent(EVENTID, 0)\n})\n"]]}]}]},{"timestamp":1757677312070,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":2597,"diffs":[[1,""]]}]}]},{"timestamp":1757750302200,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2597,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1757750321587,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2599,"length1":21075,"diffs":[[1,""]]}]}]},{"timestamp":1757751090961,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13648,"length1":13,"diffs":[[1,"enum Action {\r\n"]]}]}]},{"timestamp":1757751096705,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":13648,"length1":20,"diffs":[[1,"enum Perf {\r\n"]]},{"start1":16051,"length1":172,"diffs":[[1,"            let wave = Wave.readWave()\r\n            if (MESSAGE != Message.Stop && wave > 0)\r\n                radio.sendNumber(10000 + wave) // treat wave as Message.Wait\r\n"]]},{"start1":18609,"length1":106,"diffs":[[1,"                xgo.rotateRider(Direction.Clockwise, 0)\r\n                xgo.moveRider(Direction.Forward, SPEED)\r\n"]]},{"start1":18827,"length1":107,"diffs":[[1,"                xgo.rotateRider(Direction.Clockwise, 0)\r\n                xgo.moveRider(Direction.Backward, SPEED)\r\n"]]},{"start1":19001,"length1":155,"diffs":[[1,"                MOVEMENT = Message.Left\r\n                xgo.moveRider(Direction.Forward, 0)\r\n                xgo.rotateRider(Direction.CounterClockwise, SPEED)\r\n"]]},{"start1":19223,"length1":152,"diffs":[[1,"                MOVEMENT = Message.Right\r\n                xgo.moveRider(Direction.Forward, 0)\r\n                xgo.rotateRider(Direction.Clockwise, SPEED)\r\n"]]},{"start1":19481,"length1":54,"diffs":[[1,"                xgo.rotateRider(Direction.Clockwise, 0)\r\n"]]},{"start1":22485,"length1":33,"diffs":[[1,"        MESSAGE = Message.pause\r\n"]]}]}]},{"timestamp":1757751743628,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":10284,"length1":49,"diffs":[[1,"    function setHeight(height: number) {\r\n"]]}]}]},{"timestamp":1757751851509,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":23655,"length1":3,"diffs":[[1,"}"]]}]}]},{"timestamp":1757751854092,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7198,"length1":0,"diffs":[[1,"\r\n/*\r\nThe xgo namespace is a refactoring of the ElecFreaks 'pxt-rider' library:\r\nhttps://github.com/elecfreaks/pxt-xgo-rider/blob/main/main.ts\r\n(MIT-license)\r\n*/\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//##  BEGIN XGO  ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nserial.redirect(SerialPin.P14, SerialPin.P13, BaudRate.BaudRate115200)\r\n\r\nnamespace xgo {\r\n    let headData = 0x5500\r\n    let tailData = 0x00AA\r\n    let headDataH = (headData >> 8) & 0xff;\r\n    let headDataL = (headData >> 0) & 0xff;\r\n    let tailDataH = (tailData >> 8) & 0xff;\r\n    let tailDataL = (tailData >> 0) & 0xff;\r\n\r\n    function writeCommand(len: number, addr: number, data: number) {\r\n        let commands_buffer = pins.createBuffer(len)\r\n        commands_buffer[0] = headDataH\r\n        commands_buffer[1] = headDataL\r\n        commands_buffer[2] = len\r\n        commands_buffer[3] = 0x00\r\n        commands_buffer[4] = addr\r\n        commands_buffer[5] = data\r\n        commands_buffer[6] = ~(len + 0x00 + addr + data)\r\n        commands_buffer[7] = tailDataH\r\n        commands_buffer[8] = tailDataL\r\n        serial.writeBuffer(commands_buffer)\r\n        basic.pause(100)\r\n    }\r\n\r\n    function writeThreeCommand(len: number, addr: number, data0: number, data1: number, data2: number) {\r\n        let commands_buffer = pins.createBuffer(len)\r\n        commands_buffer[0] = headDataH\r\n        commands_buffer[1] = headDataL\r\n        commands_buffer[2] = len\r\n        commands_buffer[3] = 0x00\r\n        commands_buffer[4] = addr\r\n        commands_buffer[5] = data0\r\n        commands_buffer[6] = data1\r\n        commands_buffer[7] = data2\r\n        commands_buffer[8] = ~(len + 0x00 + addr + data0 + data1 + data2)\r\n        commands_buffer[9] = tailDataH\r\n        commands_buffer[10] = tailDataL\r\n        serial.writeBuffer(commands_buffer)\r\n        basic.pause(100)\r\n    }\r\n\r\n    function readCommand(len: number, addr: number, readlen: number) {\r\n        let commands_buffer = pins.createBuffer(len)\r\n        commands_buffer[0] = headDataH\r\n        commands_buffer[1] = headDataL\r\n        commands_buffer[2] = len\r\n        commands_buffer[3] = 0x02\r\n        commands_buffer[4] = addr\r\n        commands_buffer[5] = readlen\r\n        commands_buffer[6] = ~(len + 0x02 + addr + readlen)\r\n        commands_buffer[7] = tailDataH\r\n        commands_buffer[8] = tailDataL\r\n        serial.writeBuffer(commands_buffer)\r\n        let read_data_buffer = pins.createBuffer(9)\r\n        read_data_buffer = serial.readBuffer(9)\r\n        return read_data_buffer[5]\r\n    }\r\n\r\n    export function initXGOSerial(tx: SerialPin = SerialPin.P13, rx: SerialPin = SerialPin.P14) {\r\n\r\n        serial.redirect(tx, rx, BaudRate.BaudRate115200)\r\n        initActionMode()\r\n    }\r\n\r\n    export function initActionMode() {\r\n        let status = readCommand(0x09, 0x02, 0x01)\r\n        if (status == 0x00) return;\r\n        writeCommand(0x09, 0x3E, 0xFF)\r\n        basic.pause(1000)\r\n    }\r\n\r\n    export function batteryStatus(): number {\r\n        return readCommand(0x09, 0x01, 0x01)\r\n    }\r\n\r\n    export function setHeight(height: number) {\r\n        let data = Math.map(height, -20, 20, 0, 255)\r\n        writeCommand(0x09, 0x35, data)\r\n        basic.pause(100)\r\n    }\r\n\r\n    export function setAngle(angle: number) {\r\n        let data = Math.map(angle, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x36, data)\r\n        basic.pause(100)\r\n    }\r\n\r\n    export function moveRider(move: Move, speed: number) {\r\n        if (move == Move.Forward)\r\n            speed = -speed\r\n        let data = Math.map(speed, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x30, data)\r\n        basic.pause(100)\r\n    }\r\n\r\n    export function rotateRider(rotation: Rotate, speed: number) {\r\n        if (rotation == Rotate.Clockwise)\r\n            speed = -speed\r\n        let data = Math.map(speed, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x32, data)\r\n    }\r\n\r\n    export function squattingFunc(time: number) {\r\n        time = 4 - time\r\n        let data = Math.map(time, 0, 2, 1, 255)\r\n        writeCommand(0x09, 0x82, data)\r\n    }\r\n\r\n    export function shufflingFunc(time: number) {\r\n        time = 4 - time\r\n        let data = Math.map(time, 0, 2, 1, 255)\r\n        writeCommand(0x09, 0x39, data)\r\n    }\r\n\r\n    export function ledColor(leds: Led, color: Color) {\r\n\r\n        let len, addr, data, wait\r\n        len = 0x0B\r\n\r\n        data = fromColor(color)\r\n\r\n        if (leds & Led.Led1) {\r\n            addr = 0x69\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n        if (leds & Led.Led2) {\r\n            addr = 0x6A\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n        if (leds & Led.Led3) {\r\n            addr = 0x6B\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n        if (leds & Led.Led4) {\r\n            addr = 0x6C\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n    }\r\n\r\n    export function stopMoving() {\r\n        let data = Math.map(0, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x30, data)  // move forward/backward\r\n        writeCommand(0x09, 0x32, data)  // turn left/right\r\n    }\r\n}\r\n\r\nxgo.initXGOSerial(SerialPin.P13, SerialPin.P14)\r\n\r\n///////////////////\r\n//###############//\r\n//##           ##//\r\n//##  END XGO  ##//\r\n//##           ##//\r\n//###############//\r\n///////////////////\r\n\r\nonDisplay(() => {\r\n    if (Wave.isLeader())\r\n        basic.showString(\"L\");\r\n    else {\r\n        basic.showString(\"W\")\r\n        basic.showNumber(Wave.defPosition())\r\n    }\r\n    basic.pause(500)\r\n    basic.showIcon(IconNames.Yes)\r\n})\r\n\r\nenum Led {\r\n    //% block=\"the front left led\"\r\n    //% block.loc.nl=\"de led links-voor\"\r\n    Led1 = 1,\r\n    //% block=\"the rear left led\"\r\n    //% block.loc.nl=\"de led links-achter\"\r\n    Led2 = 2,\r\n    //% block=\"the front right led\"\r\n    //% block.loc.nl=\"de led rechts-voor\"\r\n    Led3 = 4,\r\n    //% block=\"the rear right led\"\r\n    //% block.loc.nl=\"de led rechts-achter\"\r\n    Led4 = 8,\r\n    //% block=\"all leds\"\r\n    //% block.loc.nl=\"alle leds\"\r\n    All = 15,\r\n    //% block=\"the left leds\"\r\n    //% block.loc.nl=\"de linker leds\"\r\n    Left = 3,\r\n    //% block=\"the right leds\"\r\n    //% block.loc.nl=\"de rechter leds\"\r\n    Right = 12\r\n}\r\n\r\nenum Performance {\r\n    //% block=\"not yet applicable\"\r\n    //% block.loc.nl=\"nog niet aanwezig\"\r\n    NotImplemented\r\n}\r\n\r\n//% color=\"#82200C\" icon=\"\\uf1b9\"\r\n//% block=\"XGO Rider\"\r\n//% block.loc.nl=\"XGO Rider\"\r\nnamespace XGoRider {\r\n\r\n    //////////////\r\n    // MESSAGES //\r\n    //////////////\r\n\r\n    // The XGo Rider is programmed by means of messages.\r\n    // The available messages are enumerated in 'Message'\r\n    // and are executed by the routine 'handleMessage'.\r\n\r\n    enum Message {\r\n\r\n        Stop,           // stops the walking\r\n        Wait,           // suspend the program for the specified time\r\n        Pause,          // pause the program until Message.Continue\r\n        Continue,       // continue the program after Message.Pause\r\n\r\n        Forward,        // move in the specified direction\r\n        Backward,\r\n\r\n        SetSpeed,       // set the speed between 0 and 100 %\r\n        SpeedUp,        // speeding up by 10 %\r\n        SlowDown,       // slowing down by 10 %\r\n\r\n        TurnLeft,       // turn as a continuous rotation\r\n        TurnRight,      // the rotation will be stopped by\r\n        TurnOff,        // a movement message or the stop message\r\n\r\n        Stretch,        // stretch or shrink the body\r\n        Angle,          // angle of the wheels to the floor\r\n\r\n        Leds,           // set the color of the leds\r\n\r\n        NotImplemented  // standard actions\r\n    }\r\n\r\n    let MESSAGE: number = -1\r\n    let PAUSE: boolean = false\r\n\r\n    ///////////////////////////////\r\n    // CONTROLLING THE XGO RIDER //\r\n    ///////////////////////////////\r\n\r\n    let MOVEMENT: number = Message.Stop // the latest movement message\r\n\r\n    // Speed range:\r\n    // ------------\r\n    // Value: 0 to 100 (in %)\r\n    // Message: 1000 to 1100\r\n    let SPEED: number = 50\r\n\r\n    // Stretch range:\r\n    // --------------\r\n    // Value: -20 to 20 (in mm)\r\n    // Message: 500 to 540\r\n    let STRETCH: number = 0\r\n\r\n    // Angle range:\r\n    // --------------\r\n    // Value: -100 to 100 (in degr)\r\n    // Message: 700 to 800\r\n    let ANGLE: number = 0\r\n\r\n    // Led colors:\r\n    // -----------\r\n    let LEDS: number = 0\r\n    let COLOR: Color = Color.Black\r\n\r\n    ///////////////////////////////\r\n    // MESSAGE HANDLING ROUTINES //\r\n    ///////////////////////////////\r\n\r\n    function handleMessage() {\r\n\r\n        // A leader sends its movements to the followers\r\n        if (Wave.isLeader()) {\r\n            let msec = Wave.readWait()\r\n            if (MESSAGE != Message.Stop && msec > 0)\r\n                radio.sendNumber(10000 + msec) // treat wave as Message.Wait\r\n            radio.sendNumber(MESSAGE)\r\n        }\r\n\r\n        // Instead of 'Message.Wait', this message is submitted by\r\n        // the calculated value of '10000 + wait time'.\r\n        let wait = 0\r\n        if (MESSAGE >= 10000) {\r\n            wait = MESSAGE - 10000\r\n            MESSAGE = Message.Wait\r\n        }\r\n\r\n        // Instead of 'Message.Led', this message is submitted by\r\n        // the calculated value of '2000 + Led value * 20 + Color value'.\r\n        if (MESSAGE >= 2000) {\r\n            let val = MESSAGE - 2000\r\n            LEDS = Math.floor(val / 30)\r\n            COLOR = val - LEDS * 30\r\n            MESSAGE = Message.Leds\r\n        }\r\n\r\n        // Instead of 'Message.Speed', this message is submitted by\r\n        // the calculated value of '1000 + required speed'.\r\n        if (MESSAGE >= 1000) {\r\n            SPEED = MESSAGE - 1000\r\n            // reactivate the latest movement message\r\n            MESSAGE = MOVEMENT\r\n        }\r\n\r\n        // Instead of 'Message.Angle', this message is submitted by\r\n        // the calculated value of '600 + required angle'.\r\n        if (MESSAGE >= 600) {\r\n            ANGLE = MESSAGE - 700\r\n            // reactivate the latest movement message\r\n            MESSAGE = Message.Angle\r\n        }\r\n\r\n        // Instead of 'Message.Stretch', this message is submitted by\r\n        // the calculated value of '500 + required height'.\r\n        if (MESSAGE >= 500) {\r\n            STRETCH = MESSAGE - 520\r\n            // reactivate the latest movement message\r\n            MESSAGE = Message.Stretch\r\n        }\r\n\r\n        // If needed, pause a while to get a wave effect\r\n        // Message.Stop is excluded from the wave behaviour.\r\n        if (Wave.readWait() > 0 && MESSAGE != Message.Stop)\r\n            basic.pause(Wave.readWait())\r\n\r\n        // Handle the messages\r\n        switch (MESSAGE) {\r\n            case Message.Stop:\r\n                xgo.stopMoving()\r\n                break\r\n            case Message.Wait:\r\n                basic.pause(wait * 1000)\r\n                break\r\n            case Message.Pause:\r\n                xgo.stopMoving()\r\n                PAUSE = true\r\n                break\r\n            case Message.Continue:\r\n                PAUSE = false\r\n                break\r\n            //\r\n            // MOVEMENT CONTROL\r\n            //\r\n            case Message.Forward:\r\n                MOVEMENT = Message.Forward\r\n                xgo.rotateRider(Rotate.Clockwise, 0)\r\n                xgo.moveRider(Move.Forward, SPEED)\r\n                break\r\n            case Message.Backward:\r\n                MOVEMENT = Message.Backward\r\n                xgo.rotateRider(Rotate.Clockwise, 0)\r\n                xgo.moveRider(Move.Backward, SPEED)\r\n                break\r\n            case Message.TurnLeft:\r\n                MOVEMENT = Message.TurnLeft\r\n                xgo.moveRider(Move.Forward, 0)\r\n                xgo.rotateRider(Rotate.AntiClockwise, SPEED)\r\n                break\r\n            case Message.TurnRight:\r\n                MOVEMENT = Message.TurnRight\r\n                xgo.moveRider(Move.Forward, 0)\r\n                xgo.rotateRider(Rotate.Clockwise, SPEED)\r\n                break\r\n            case Message.TurnOff:\r\n                MOVEMENT = Message.TurnOff\r\n                xgo.rotateRider(Rotate.Clockwise, 0)\r\n                break\r\n            case Message.SpeedUp:\r\n                SPEED += 10\r\n                if (SPEED > 100) SPEED = 100\r\n                // call handleMessage recursively to activate the speed\r\n                MESSAGE = MOVEMENT\r\n                handleMessage()\r\n                break\r\n            case Message.SlowDown:\r\n                SPEED -= 10\r\n                if (SPEED < 0) SPEED = 0\r\n                // call handleMessage recursively to activate the speed\r\n                MESSAGE = MOVEMENT\r\n                handleMessage()\r\n                break\r\n            case Message.Stretch:\r\n                xgo.setHeight(STRETCH)\r\n                break\r\n            case Message.Angle:\r\n                xgo.setAngle(ANGLE)\r\n                break\r\n            //\r\n            // LED CONTROL\r\n            //\r\n            case Message.Leds:\r\n                xgo.ledColor(LEDS, COLOR)\r\n                break;\r\n            //\r\n            // STANDARD ACTIONS\r\n            //\r\n            case Message.NotImplemented:\r\n                break\r\n        }\r\n        MESSAGE = -1\r\n    }\r\n\r\n    ////////////////////////\r\n    // PROGRAMMING BLOCKS //\r\n    ////////////////////////\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"turn %led to %color\"\r\n    //% block.loc.nl=\"maak %led %color\"\r\n    export function led(led: Led, color: Color) {\r\n        MESSAGE = 2000 + led * 30 + color\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"stretch %height mm\"\r\n    //% block.loc.nl=\"strek %height mm\"\r\n    //% height.min=0 height.max=20 height.defl=0\r\n    export function stretch(height: number) {\r\n        MESSAGE = 520 + height\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"shrink %height mm\"\r\n    //% block.loc.nl=\"krimp %height mm\"\r\n    //% height.min=0 height.max=20 height.defl=0\r\n    export function shrink(height: number) {\r\n        MESSAGE = 520 - height\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"lean %angle ° to the left\"\r\n    //% block.loc.nl=\"hel %angle ° over naar links\"\r\n    //% angle.min=0 angle.max=45 angle.defl=0\r\n    export function leanLeft(angle: number) {\r\n        MESSAGE = 700 + 2 * angle\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"lean %angle ° to the right\"\r\n    //% block.loc.nl=\"hel %angle ° over naar rechts\"\r\n    //% angle.min=0 angle.max=45 angle.defl=0\r\n    export function leanRight(angle: number) {\r\n        MESSAGE = 700 - 2 * angle\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"continue\"\r\n    //% block.loc.nl=\"einde pauze\"\r\n    export function pauseOff() {\r\n        MESSAGE = Message.Continue\r\n        handleMessage()\r\n    }\r\n\r\n    //% block=\"pause\"\r\n    //% block.loc.nl=\"begin pauze\"\r\n    export function pauseOn() {\r\n        MESSAGE = Message.Pause\r\n        handleMessage()\r\n    }\r\n\r\n    //% block=\"stop\"\r\n    //% block.loc.nl=\"stop\"\r\n    export function stop() {\r\n        MESSAGE = Message.Stop\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"turn %rotation\"\r\n    //% block.loc.nl=\"draai %rotation\"\r\n    export function turn(rotation: Rotate) {\r\n        switch (rotation) {\r\n            case Rotate.AntiClockwise: MESSAGE = Message.TurnLeft; break;\r\n            case Rotate.Clockwise: MESSAGE = Message.TurnRight; break;\r\n        }\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"ride %movement\"\r\n    //% block.loc.nl=\"rijd %movement\"\r\n    export function move(movement: Move) {\r\n        switch (movement) {\r\n            case Move.Forward: MESSAGE = Message.Forward; break;\r\n            case Move.Backward: MESSAGE = Message.Backward; break;\r\n        }\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"set speed to %speed \\\\%\"\r\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\r\n    //% speed.min=0 speed.max=100 speed.defl=50\r\n    export function setSpeed(speed: number) {\r\n        MESSAGE = 1000 + speed;\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n}\r\n"]]}]}]},{"timestamp":1757752579757,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7198,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1757752950626,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"let GROUP = 1\r\n\r\ntype handler = () => void\r\n\r\nlet displayHandler: handler\r\nfunction onDisplay(code: () => void) {\r\n    displayHandler = code;\r\n}\r\n\r\nfunction display() {\r\n    basic.showNumber(GROUP)\r\n    basic.pause(500)\r\n    if (displayHandler) displayHandler()\r\n    else basic.showIcon(IconNames.Yes)\r\n}\r\n\r\ndisplay()\r\n\r\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\r\nlet EVENTCNT = 0\r\n\r\ncontrol.onEvent(EVENTID, 0, function () {\r\n    control.inBackground(() => {\r\n        EVENTCNT++\r\n        basic.showNumber(GROUP)\r\n        let tm = control.millis() + 1000\r\n        while (tm > control.millis()) basic.pause(1)\r\n        EVENTCNT--\r\n        if (!EVENTCNT) display()\r\n    })\r\n})\r\n\r\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\r\n    GROUP++\r\n    if (GROUP > 9) GROUP = 1\r\n    radio.setGroup(GROUP)\r\n    control.raiseEvent(EVENTID, 0)\r\n})\r\n\r\nenum Digital {\r\n    //% block=\"low\"\r\n    //% block.loc.nl=\"laag\"\r\n    Low,\r\n    //% block=\"high\"\r\n    //% block.loc.nl=\"hoog\"\r\n    High,\r\n}\r\n\r\nenum Move {\r\n    //% block=\"forward\"\r\n    //% block.loc.nl=\"vooruit\"\r\n    Forward,\r\n    //% block=\"backward\"\r\n    //% block.loc.nl=\"achteruit\"\r\n    Backward,\r\n}\r\n\r\nenum Rotate {\r\n    //% block=\"clockwise\"\r\n    //% block.loc.nl=\"rechtsom\"\r\n    Clockwise,\r\n    //% block=\"anticlockwise\"\r\n    //% block.loc.nl=\"linksom\"\r\n    AntiClockwise,\r\n}\r\n\r\nenum Pace {\r\n    //% block=\"fast\"\r\n    //% block.loc.nl=\"snelle\"\r\n    Fast,\r\n    //% block=\"normal\"\r\n    //% block.loc.nl=\"normale\"\r\n    Normal,\r\n    //% block=\"slow\"\r\n    //% block.loc.nl=\"langzame\"\r\n    Slow,\r\n}\r\n\r\nenum State {\r\n    //% block=\"off\"\r\n    //% block.loc.nl=\"uit\"\r\n    Off,\r\n    //% block=\"on\"\r\n    //% block.loc.nl=\"aan\"\r\n    On,\r\n}\r\n\r\n//% color=\"#61CBF4\" icon=\"\\uf075\"\r\n//% block=\"General\"\r\n//% block.loc.nl=\"Algemeen\"\r\nnamespace General {\r\n\r\n    //% color=\"#008800\"\r\n    //% block=\"comment: %dummy\"\r\n    //% block.loc.nl=\"uitleg: %dummy\"\r\n    //% dummy.defl=\"schrijf hier je uitleg\"\r\n    export function comment(dummy: string) {\r\n    }\r\n\r\n    //% block=\"a number from %min upto %max\"\r\n    //% block.loc.nl=\"een getal van %min t/m %max\"\r\n    //% min.defl=0 max.defl=10\r\n    export function randomInt(min: number, max: number): number {\r\n        let i = 0\r\n        if (min > max) {\r\n            i = min\r\n            min = max\r\n            max = i\r\n        }\r\n        i = max - min + 1\r\n        i = min + Math.floor(Math.random() * i)\r\n        return i\r\n    }\r\n\r\n    //% block=\"wait %sec seconds\"\r\n    //% block.loc.nl=\"wacht %sec seconden\"\r\n    export function wait(sec: number) {\r\n        basic.pause(sec * 1000)\r\n    }\r\n}\r\n\r\nenum Color {\r\n    //% block=\"none\"\r\n    //% block.loc.nl=\"geen\"\r\n    None,\r\n    //% block=\"red\"\r\n    //% block.loc.nl=\"rood\"\r\n    Red,\r\n    //% block=\"green\"\r\n    //% block.loc.nl=\"groen\"\r\n    Green,\r\n    //% block=\"blue\"\r\n    //% block.loc.nl=\"blauw\"\r\n    Blue,\r\n    //% block=\"yellow\"\r\n    //% block.loc.nl=\"geel\"\r\n    Yellow,\r\n    //% block=\"cyan\"\r\n    //% block.loc.nl=\"cyaan\"\r\n    Cyan,\r\n    //% block=\"magenta\"\r\n    //% block.loc.nl=\"magenta\"\r\n    Magenta,\r\n    //% block=\"black\"\r\n    //% block.loc.nl=\"zwart\"\r\n    Black,\r\n    //% block=\"dark grey\"\r\n    //% block.loc.nl=\"donkergrijs\"\r\n    DarkGrey,\r\n    //% block=\"grey\"\r\n    //% block.loc.nl=\"grijs\"\r\n    Grey,\r\n    //% block=\"light grey\"\r\n    //% block.loc.nl=\"lichtgrijs\"\r\n    LightGrey,\r\n    //% block=\"white\"\r\n    //% block.loc.nl=\"wit\"\r\n    White,\r\n    //% block=\"orange\"\r\n    //% block.loc.nl=\"oranje\"\r\n    Orange,\r\n    //% block=\"brown\"\r\n    //% block.loc.nl=\"bruin\"\r\n    Brown,\r\n    //% block=\"pink\"\r\n    //% block.loc.nl=\"roze\"\r\n    Pink,\r\n    //% block=\"indigo\"\r\n    //% block.loc.nl=\"indigo\"\r\n    Indigo,\r\n    //% block=\"violet\"\r\n    //% block.loc.nl=\"violet\"\r\n    Violet,\r\n    //% block=\"purple\"\r\n    //% block.loc.nl=\"paars\"\r\n    Purple\r\n}\r\n\r\nfunction fromColor(color: Color): number {\r\n    let val = 0\r\n    switch (color) {\r\n        case Color.Red: val = 0xFF0000; break;\r\n        case Color.Green: val = 0x00FF00; break;\r\n        case Color.Blue: val = 0x0000FF; break;\r\n        case Color.Yellow: val = 0xFFFF00; break;\r\n        case Color.Cyan: val = 0x00FFFF; break;\r\n        case Color.Magenta: val = 0xFF00FF; break;\r\n        case Color.Black: val = 0x000000; break;\r\n        case Color.DarkGrey: val = 0xA9A9A9; break;\r\n        case Color.Grey: val = 0x808080; break;\r\n        case Color.LightGrey: val = 0xD3D3D3; break;\r\n        case Color.White: val = 0xFFFFFF; break;\r\n        case Color.Orange: val = 0xFFA500; break;\r\n        case Color.Brown: val = 0xA52A2A; break;\r\n        case Color.Pink: val = 0xFFC0CB; break;\r\n        case Color.Indigo: val = 0x4b0082; break;\r\n        case Color.Violet: val = 0x8a2be2; break;\r\n        case Color.Purple: val = 0x800080; break;\r\n    }\r\n    return val\r\n}\r\n\r\nfunction fromRgb(red: number, green: number, blue: number): number {\r\n    let rgb = ((red & 0xFF) << 16) | ((green & 0xFF) << 8) | (blue & 0xFF)\r\n    return rgb;\r\n}\r\n\r\nfunction redValue(rgb: number): number {\r\n    let r = (rgb >> 16) & 0xFF;\r\n    return r;\r\n}\r\n\r\nfunction greenValue(rgb: number): number {\r\n    let g = (rgb >> 8) & 0xFF;\r\n    return g;\r\n}\r\n\r\nfunction blueValue(rgb: number): number {\r\n    let b = (rgb) & 0xFF;\r\n    return b;\r\n}\r\n\r\nenum Position {\r\n    //% block=\"leader\"\r\n    //% block.loc.nl=\"leider\"\r\n    Leader,\r\n    //% block=\"position 1\"\r\n    //% block.loc.nl=\"positie 1\"\r\n    Position1,\r\n    //% block=\"position 2\"\r\n    //% block.loc.nl=\"positie 2\"\r\n    Position2,\r\n    //% block=\"position 3\"\r\n    //% block.loc.nl=\"positie 3\"\r\n    Position3,\r\n    //% block=\"position 4\"\r\n    //% block.loc.nl=\"positie 4\"\r\n    Position4,\r\n    //% block=\"position 5\"\r\n    //% block.loc.nl=\"positie 5\"\r\n    Position5,\r\n    //% block=\"position 6\"\r\n    //% block.loc.nl=\"positie 6\"\r\n    Position6,\r\n    //% block=\"position 7\"\r\n    //% block.loc.nl=\"positie 7\"\r\n    Position7,\r\n    //% block=\"position 8\"\r\n    //% block.loc.nl=\"positie 8\"\r\n    Position8,\r\n    //% block=\"position 9\"\r\n    //% block.loc.nl=\"positie 9\"\r\n    Position9\r\n}\r\n\r\n//% color=\"#AEAEAE\" icon=\"\\uf140\"\r\n//% block=\"Wave\"\r\n//% block.loc.nl=\"Wave\"\r\nnamespace Wave {\r\n\r\n    let POSITION = Position.Leader\r\n    let PACE = 0\r\n\r\n    export function readWait(): number {\r\n        return POSITION * PACE\r\n    }\r\n\r\n    //% block=\"%pace pace\"\r\n    //% block.loc.nl=\"%pace tempo\"\r\n    export function defPace(pace: Pace): number {\r\n        return (pace + 1) * 500\r\n    }\r\n\r\n    //% block=\"position\"\r\n    //% block.loc.nl=\"positie\"\r\n    export function defPosition(): Position {\r\n        return POSITION\r\n    }\r\n\r\n    //% block=\"it is the leader\"\r\n    //% block.loc.nl=\"het de leider is\"\r\n    export function isLeader(): boolean {\r\n        return (POSITION == Position.Leader)\r\n    }\r\n\r\n    //% block=\"turn %state the wave\"\r\n    //% block.loc.nl=\"zet de wave %state\"\r\n    export function setOff() {\r\n        PACE = 0\r\n    }\r\n\r\n    //% block=\"follow after %sec seconds\"\r\n    //% block.loc.nl=\"volg na %sec seconden\"\r\n    export function setOn(sec: number) {\r\n        PACE = sec * 1000\r\n    }\r\n\r\n    //% block=\"follow at %pos\"\r\n    //% block.loc.nl=\"volg op %pos\"\r\n    export function setPosition(position: Position) {\r\n        POSITION = position\r\n    }\r\n}\r\n\r\n"]]}]}]},{"timestamp":1757753209773,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":7675,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":24,"diffs":[[1,"    \"name\": \"test\",\n"]]}]}]},{"timestamp":1757753797799,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":7675,"length1":16416,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":231,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1757668350650,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1757670196551,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"let GROUP = 1\n\nfunction display() {\n    basic.showNumber(GROUP)\n}\n\ndisplay()\n\nlet TIMER = false\n\nfunction displayTimer() {\n    let tm = control.millis() + 3000\n    control.inBackground(() => {\n        while (TIMER && (tm > control.millis())) { }\n        if (TIMER) display()\n        else basic.showNumber(GROUP)\n    })\n}\n\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    GROUP++\n    if (GROUP > 9) GROUP = 1\n    radio.setGroup(GROUP)\n    // stop display timer\n    TIMER = false\n    basic.pause(10)\n    // start new display TIMER\n    displayTimer()\n})\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757672035201,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"let GROUP = 1\nbasic.showNumber(GROUP)\n\nconst TIMERID = 200 + Math.randomRange(0, 100); // semi-unique\n\nfunction display() {\n    basic.showIcon(IconNames.Yes)\n}\n\nfunction displayTimer(time: number) {\n    \n    const timerTimeout1 = 1;\n\n    basic.showNumber(GROUP)\n\n    control.onEvent(TIMERID, 0, function () {\n        control.inBackground(() => {\n            d()\n        })\n    })\n\n    control.inBackground(() => {\n        while (true) {\n            \n            basic.pause(time * 1000);\n        }\n    })\n}\n\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    GROUP++\n    if (GROUP > 9) GROUP = 1\n    radio.setGroup(GROUP)\n    control.raiseEvent(TIMERID, 3000);\n})\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757673837320,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"let GROUP = 1\nbasic.showNumber(GROUP)\n\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\nlet   TIMER = false\n\nfunction display() {\n    basic.showIcon(IconNames.Yes)\n}\n\ncontrol.onEvent(EVENTID, 0, function () {\n        let tm = control.millis() + 2000\n        TIMER = true\n        while (tm > control.millis()) { }\n        TIMER = false\n})\n\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    GROUP++\n    if (GROUP > 9) GROUP = 1\n    radio.setGroup(GROUP)\n    basic.showNumber(GROUP)\n    control.raiseEvent(EVENTID, 0);\n})\n\nloops.everyInterval(3000, () => void {\n    \n})\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757675637440,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"let GROUP = 1\nbasic.showNumber(GROUP)\n\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\nlet TIMER = false\nlet BUSY = false\n\nfunction display() {\n    basic.showIcon(IconNames.Yes)\n}\n\ncontrol.onEvent(EVENTID, 0, function () {\n    control.inBackground(() => {\n        while (TIMER) basic.pause(1)\n    })\n})\n\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    TIMER = false\n    while (BUSY) {}\n    GROUP++\n    if (GROUP > 9) GROUP = 1\n    radio.setGroup(GROUP)\n    basic.showNumber(GROUP)\n    TIMER = true\n    control.raiseEvent(EVENTID, 0);\n})\n\ninput.onButtonPressed(Button.A, function() {\n    \n})","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757750302200,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1757752579757,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Yes</field></block></statement></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"let GROUP = 1\r\n\r\ntype handler = () => void\r\n\r\nlet displayHandler: handler\r\nfunction onDisplay(code: () => void) {\r\n    displayHandler = code;\r\n}\r\n\r\nfunction display() {\r\n    basic.showNumber(GROUP)\r\n    basic.pause(500)\r\n    if (displayHandler) displayHandler()\r\n    else basic.showIcon(IconNames.Yes)\r\n}\r\n\r\ndisplay()\r\n\r\nconst EVENTID = 200 + Math.randomRange(0, 100); // semi-unique\r\nlet EVENTCNT = 0\r\n\r\ncontrol.onEvent(EVENTID, 0, function () {\r\n    control.inBackground(() => {\r\n        EVENTCNT++\r\n        basic.showNumber(GROUP)\r\n        let tm = control.millis() + 1000\r\n        while (tm > control.millis()) basic.pause(1)\r\n        EVENTCNT--\r\n        if (!EVENTCNT) display()\r\n    })\r\n})\r\n\r\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\r\n    GROUP++\r\n    if (GROUP > 9) GROUP = 1\r\n    radio.setGroup(GROUP)\r\n    control.raiseEvent(EVENTID, 0)\r\n})\r\n\r\nenum Digital {\r\n    //% block=\"low\"\r\n    //% block.loc.nl=\"laag\"\r\n    Low,\r\n    //% block=\"high\"\r\n    //% block.loc.nl=\"hoog\"\r\n    High,\r\n}\r\n\r\nenum Move {\r\n    //% block=\"forward\"\r\n    //% block.loc.nl=\"vooruit\"\r\n    Forward,\r\n    //% block=\"backward\"\r\n    //% block.loc.nl=\"achteruit\"\r\n    Backward,\r\n}\r\n\r\nenum Rotate {\r\n    //% block=\"clockwise\"\r\n    //% block.loc.nl=\"rechtsom\"\r\n    Clockwise,\r\n    //% block=\"anticlockwise\"\r\n    //% block.loc.nl=\"linksom\"\r\n    AntiClockwise,\r\n}\r\n\r\nenum Pace {\r\n    //% block=\"fast\"\r\n    //% block.loc.nl=\"snelle\"\r\n    Fast,\r\n    //% block=\"normal\"\r\n    //% block.loc.nl=\"normale\"\r\n    Normal,\r\n    //% block=\"slow\"\r\n    //% block.loc.nl=\"langzame\"\r\n    Slow,\r\n}\r\n\r\nenum State {\r\n    //% block=\"off\"\r\n    //% block.loc.nl=\"uit\"\r\n    Off,\r\n    //% block=\"on\"\r\n    //% block.loc.nl=\"aan\"\r\n    On,\r\n}\r\n\r\n//% color=\"#61CBF4\" icon=\"\\uf075\"\r\n//% block=\"General\"\r\n//% block.loc.nl=\"Algemeen\"\r\nnamespace General {\r\n\r\n    //% color=\"#008800\"\r\n    //% block=\"comment: %dummy\"\r\n    //% block.loc.nl=\"uitleg: %dummy\"\r\n    //% dummy.defl=\"schrijf hier je uitleg\"\r\n    export function comment(dummy: string) {\r\n    }\r\n\r\n    //% block=\"a number from %min upto %max\"\r\n    //% block.loc.nl=\"een getal van %min t/m %max\"\r\n    //% min.defl=0 max.defl=10\r\n    export function randomInt(min: number, max: number): number {\r\n        let i = 0\r\n        if (min > max) {\r\n            i = min\r\n            min = max\r\n            max = i\r\n        }\r\n        i = max - min + 1\r\n        i = min + Math.floor(Math.random() * i)\r\n        return i\r\n    }\r\n\r\n    //% block=\"wait %sec seconds\"\r\n    //% block.loc.nl=\"wacht %sec seconden\"\r\n    export function wait(sec: number) {\r\n        basic.pause(sec * 1000)\r\n    }\r\n}\r\n\r\nenum Color {\r\n    //% block=\"none\"\r\n    //% block.loc.nl=\"geen\"\r\n    None,\r\n    //% block=\"red\"\r\n    //% block.loc.nl=\"rood\"\r\n    Red,\r\n    //% block=\"green\"\r\n    //% block.loc.nl=\"groen\"\r\n    Green,\r\n    //% block=\"blue\"\r\n    //% block.loc.nl=\"blauw\"\r\n    Blue,\r\n    //% block=\"yellow\"\r\n    //% block.loc.nl=\"geel\"\r\n    Yellow,\r\n    //% block=\"cyan\"\r\n    //% block.loc.nl=\"cyaan\"\r\n    Cyan,\r\n    //% block=\"magenta\"\r\n    //% block.loc.nl=\"magenta\"\r\n    Magenta,\r\n    //% block=\"black\"\r\n    //% block.loc.nl=\"zwart\"\r\n    Black,\r\n    //% block=\"dark grey\"\r\n    //% block.loc.nl=\"donkergrijs\"\r\n    DarkGrey,\r\n    //% block=\"grey\"\r\n    //% block.loc.nl=\"grijs\"\r\n    Grey,\r\n    //% block=\"light grey\"\r\n    //% block.loc.nl=\"lichtgrijs\"\r\n    LightGrey,\r\n    //% block=\"white\"\r\n    //% block.loc.nl=\"wit\"\r\n    White,\r\n    //% block=\"orange\"\r\n    //% block.loc.nl=\"oranje\"\r\n    Orange,\r\n    //% block=\"brown\"\r\n    //% block.loc.nl=\"bruin\"\r\n    Brown,\r\n    //% block=\"pink\"\r\n    //% block.loc.nl=\"roze\"\r\n    Pink,\r\n    //% block=\"indigo\"\r\n    //% block.loc.nl=\"indigo\"\r\n    Indigo,\r\n    //% block=\"violet\"\r\n    //% block.loc.nl=\"violet\"\r\n    Violet,\r\n    //% block=\"purple\"\r\n    //% block.loc.nl=\"paars\"\r\n    Purple\r\n}\r\n\r\nfunction fromColor(color: Color): number {\r\n    let val = 0\r\n    switch (color) {\r\n        case Color.Red: val = 0xFF0000; break;\r\n        case Color.Green: val = 0x00FF00; break;\r\n        case Color.Blue: val = 0x0000FF; break;\r\n        case Color.Yellow: val = 0xFFFF00; break;\r\n        case Color.Cyan: val = 0x00FFFF; break;\r\n        case Color.Magenta: val = 0xFF00FF; break;\r\n        case Color.Black: val = 0x000000; break;\r\n        case Color.DarkGrey: val = 0xA9A9A9; break;\r\n        case Color.Grey: val = 0x808080; break;\r\n        case Color.LightGrey: val = 0xD3D3D3; break;\r\n        case Color.White: val = 0xFFFFFF; break;\r\n        case Color.Orange: val = 0xFFA500; break;\r\n        case Color.Brown: val = 0xA52A2A; break;\r\n        case Color.Pink: val = 0xFFC0CB; break;\r\n        case Color.Indigo: val = 0x4b0082; break;\r\n        case Color.Violet: val = 0x8a2be2; break;\r\n        case Color.Purple: val = 0x800080; break;\r\n    }\r\n    return val\r\n}\r\n\r\nfunction fromRgb(red: number, green: number, blue: number): number {\r\n    let rgb = ((red & 0xFF) << 16) | ((green & 0xFF) << 8) | (blue & 0xFF)\r\n    return rgb;\r\n}\r\n\r\nfunction redValue(rgb: number): number {\r\n    let r = (rgb >> 16) & 0xFF;\r\n    return r;\r\n}\r\n\r\nfunction greenValue(rgb: number): number {\r\n    let g = (rgb >> 8) & 0xFF;\r\n    return g;\r\n}\r\n\r\nfunction blueValue(rgb: number): number {\r\n    let b = (rgb) & 0xFF;\r\n    return b;\r\n}\r\n\r\nenum Position {\r\n    //% block=\"leader\"\r\n    //% block.loc.nl=\"leider\"\r\n    Leader,\r\n    //% block=\"position 1\"\r\n    //% block.loc.nl=\"positie 1\"\r\n    Position1,\r\n    //% block=\"position 2\"\r\n    //% block.loc.nl=\"positie 2\"\r\n    Position2,\r\n    //% block=\"position 3\"\r\n    //% block.loc.nl=\"positie 3\"\r\n    Position3,\r\n    //% block=\"position 4\"\r\n    //% block.loc.nl=\"positie 4\"\r\n    Position4,\r\n    //% block=\"position 5\"\r\n    //% block.loc.nl=\"positie 5\"\r\n    Position5,\r\n    //% block=\"position 6\"\r\n    //% block.loc.nl=\"positie 6\"\r\n    Position6,\r\n    //% block=\"position 7\"\r\n    //% block.loc.nl=\"positie 7\"\r\n    Position7,\r\n    //% block=\"position 8\"\r\n    //% block.loc.nl=\"positie 8\"\r\n    Position8,\r\n    //% block=\"position 9\"\r\n    //% block.loc.nl=\"positie 9\"\r\n    Position9\r\n}\r\n\r\n//% color=\"#AEAEAE\" icon=\"\\uf140\"\r\n//% block=\"Wave\"\r\n//% block.loc.nl=\"Wave\"\r\nnamespace Wave {\r\n\r\n    let POSITION = Position.Leader\r\n    let PACE = 0\r\n\r\n    export function readWait(): number {\r\n        return POSITION * PACE\r\n    }\r\n\r\n    //% block=\"%pace pace\"\r\n    //% block.loc.nl=\"%pace tempo\"\r\n    export function defPace(pace: Pace): number {\r\n        return (pace + 1) * 500\r\n    }\r\n\r\n    //% block=\"position\"\r\n    //% block.loc.nl=\"positie\"\r\n    export function defPosition(): Position {\r\n        return POSITION\r\n    }\r\n\r\n    //% block=\"it is the leader\"\r\n    //% block.loc.nl=\"het de leider is\"\r\n    export function isLeader(): boolean {\r\n        return (POSITION == Position.Leader)\r\n    }\r\n\r\n    //% block=\"turn %state the wave\"\r\n    //% block.loc.nl=\"zet de wave %state\"\r\n    export function setOff() {\r\n        PACE = 0\r\n    }\r\n\r\n    //% block=\"follow after %sec seconds\"\r\n    //% block.loc.nl=\"volg na %sec seconden\"\r\n    export function setOn(sec: number) {\r\n        PACE = sec * 1000\r\n    }\r\n\r\n    //% block=\"follow at %pos\"\r\n    //% block.loc.nl=\"volg op %pos\"\r\n    export function setPosition(position: Position) {\r\n        POSITION = position\r\n    }\r\n}\r\n\r\n/*\r\nThe xgo namespace is a refactoring of the ElecFreaks 'pxt-rider' library:\r\nhttps://github.com/elecfreaks/pxt-xgo-rider/blob/main/main.ts\r\n(MIT-license)\r\n*/\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//##  BEGIN XGO  ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nserial.redirect(SerialPin.P14, SerialPin.P13, BaudRate.BaudRate115200)\r\n\r\nnamespace xgo {\r\n    let headData = 0x5500\r\n    let tailData = 0x00AA\r\n    let headDataH = (headData >> 8) & 0xff;\r\n    let headDataL = (headData >> 0) & 0xff;\r\n    let tailDataH = (tailData >> 8) & 0xff;\r\n    let tailDataL = (tailData >> 0) & 0xff;\r\n\r\n    function writeCommand(len: number, addr: number, data: number) {\r\n        let commands_buffer = pins.createBuffer(len)\r\n        commands_buffer[0] = headDataH\r\n        commands_buffer[1] = headDataL\r\n        commands_buffer[2] = len\r\n        commands_buffer[3] = 0x00\r\n        commands_buffer[4] = addr\r\n        commands_buffer[5] = data\r\n        commands_buffer[6] = ~(len + 0x00 + addr + data)\r\n        commands_buffer[7] = tailDataH\r\n        commands_buffer[8] = tailDataL\r\n        serial.writeBuffer(commands_buffer)\r\n        basic.pause(100)\r\n    }\r\n\r\n    function writeThreeCommand(len: number, addr: number, data0: number, data1: number, data2: number) {\r\n        let commands_buffer = pins.createBuffer(len)\r\n        commands_buffer[0] = headDataH\r\n        commands_buffer[1] = headDataL\r\n        commands_buffer[2] = len\r\n        commands_buffer[3] = 0x00\r\n        commands_buffer[4] = addr\r\n        commands_buffer[5] = data0\r\n        commands_buffer[6] = data1\r\n        commands_buffer[7] = data2\r\n        commands_buffer[8] = ~(len + 0x00 + addr + data0 + data1 + data2)\r\n        commands_buffer[9] = tailDataH\r\n        commands_buffer[10] = tailDataL\r\n        serial.writeBuffer(commands_buffer)\r\n        basic.pause(100)\r\n    }\r\n\r\n    function readCommand(len: number, addr: number, readlen: number) {\r\n        let commands_buffer = pins.createBuffer(len)\r\n        commands_buffer[0] = headDataH\r\n        commands_buffer[1] = headDataL\r\n        commands_buffer[2] = len\r\n        commands_buffer[3] = 0x02\r\n        commands_buffer[4] = addr\r\n        commands_buffer[5] = readlen\r\n        commands_buffer[6] = ~(len + 0x02 + addr + readlen)\r\n        commands_buffer[7] = tailDataH\r\n        commands_buffer[8] = tailDataL\r\n        serial.writeBuffer(commands_buffer)\r\n        let read_data_buffer = pins.createBuffer(9)\r\n        read_data_buffer = serial.readBuffer(9)\r\n        return read_data_buffer[5]\r\n    }\r\n\r\n    export function initXGOSerial(tx: SerialPin = SerialPin.P13, rx: SerialPin = SerialPin.P14) {\r\n\r\n        serial.redirect(tx, rx, BaudRate.BaudRate115200)\r\n        initActionMode()\r\n    }\r\n\r\n    export function initActionMode() {\r\n        let status = readCommand(0x09, 0x02, 0x01)\r\n        if (status == 0x00) return;\r\n        writeCommand(0x09, 0x3E, 0xFF)\r\n        basic.pause(1000)\r\n    }\r\n\r\n    export function batteryStatus(): number {\r\n        return readCommand(0x09, 0x01, 0x01)\r\n    }\r\n\r\n    export function setHeight(height: number) {\r\n        let data = Math.map(height, -20, 20, 0, 255)\r\n        writeCommand(0x09, 0x35, data)\r\n        basic.pause(100)\r\n    }\r\n\r\n    export function setAngle(angle: number) {\r\n        let data = Math.map(angle, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x36, data)\r\n        basic.pause(100)\r\n    }\r\n\r\n    export function moveRider(move: Move, speed: number) {\r\n        if (move == Move.Forward)\r\n            speed = -speed\r\n        let data = Math.map(speed, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x30, data)\r\n        basic.pause(100)\r\n    }\r\n\r\n    export function rotateRider(rotation: Rotate, speed: number) {\r\n        if (rotation == Rotate.Clockwise)\r\n            speed = -speed\r\n        let data = Math.map(speed, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x32, data)\r\n    }\r\n\r\n    export function squattingFunc(time: number) {\r\n        time = 4 - time\r\n        let data = Math.map(time, 0, 2, 1, 255)\r\n        writeCommand(0x09, 0x82, data)\r\n    }\r\n\r\n    export function shufflingFunc(time: number) {\r\n        time = 4 - time\r\n        let data = Math.map(time, 0, 2, 1, 255)\r\n        writeCommand(0x09, 0x39, data)\r\n    }\r\n\r\n    export function ledColor(leds: Led, color: Color) {\r\n\r\n        let len, addr, data, wait\r\n        len = 0x0B\r\n\r\n        data = fromColor(color)\r\n\r\n        if (leds & Led.Led1) {\r\n            addr = 0x69\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n        if (leds & Led.Led2) {\r\n            addr = 0x6A\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n        if (leds & Led.Led3) {\r\n            addr = 0x6B\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n        if (leds & Led.Led4) {\r\n            addr = 0x6C\r\n            writeThreeCommand(len, addr, ((data >> 16) & 0xff), ((data >> 8) & 0xff), ((data >> 0) & 0xff))\r\n        }\r\n    }\r\n\r\n    export function stopMoving() {\r\n        let data = Math.map(0, -100, 100, 0, 255)\r\n        writeCommand(0x09, 0x30, data)  // move forward/backward\r\n        writeCommand(0x09, 0x32, data)  // turn left/right\r\n    }\r\n}\r\n\r\nxgo.initXGOSerial(SerialPin.P13, SerialPin.P14)\r\n\r\n///////////////////\r\n//###############//\r\n//##           ##//\r\n//##  END XGO  ##//\r\n//##           ##//\r\n//###############//\r\n///////////////////\r\n\r\nonDisplay(() => {\r\n    if (Wave.isLeader())\r\n        basic.showString(\"L\");\r\n    else {\r\n        basic.showString(\"W\")\r\n        basic.showNumber(Wave.defPosition())\r\n    }\r\n    basic.pause(500)\r\n    basic.showIcon(IconNames.Yes)\r\n})\r\n\r\nenum Led {\r\n    //% block=\"the front left led\"\r\n    //% block.loc.nl=\"de led links-voor\"\r\n    Led1 = 1,\r\n    //% block=\"the rear left led\"\r\n    //% block.loc.nl=\"de led links-achter\"\r\n    Led2 = 2,\r\n    //% block=\"the front right led\"\r\n    //% block.loc.nl=\"de led rechts-voor\"\r\n    Led3 = 4,\r\n    //% block=\"the rear right led\"\r\n    //% block.loc.nl=\"de led rechts-achter\"\r\n    Led4 = 8,\r\n    //% block=\"all leds\"\r\n    //% block.loc.nl=\"alle leds\"\r\n    All = 15,\r\n    //% block=\"the left leds\"\r\n    //% block.loc.nl=\"de linker leds\"\r\n    Left = 3,\r\n    //% block=\"the right leds\"\r\n    //% block.loc.nl=\"de rechter leds\"\r\n    Right = 12\r\n}\r\n\r\nenum Performance {\r\n    //% block=\"not yet applicable\"\r\n    //% block.loc.nl=\"nog niet aanwezig\"\r\n    NotImplemented\r\n}\r\n\r\n//% color=\"#82200C\" icon=\"\\uf1b9\"\r\n//% block=\"XGO Rider\"\r\n//% block.loc.nl=\"XGO Rider\"\r\nnamespace XGoRider {\r\n\r\n    //////////////\r\n    // MESSAGES //\r\n    //////////////\r\n\r\n    // The XGo Rider is programmed by means of messages.\r\n    // The available messages are enumerated in 'Message'\r\n    // and are executed by the routine 'handleMessage'.\r\n\r\n    enum Message {\r\n\r\n        Stop,           // stops the walking\r\n        Wait,           // suspend the program for the specified time\r\n        Pause,          // pause the program until Message.Continue\r\n        Continue,       // continue the program after Message.Pause\r\n\r\n        Forward,        // move in the specified direction\r\n        Backward,\r\n\r\n        SetSpeed,       // set the speed between 0 and 100 %\r\n        SpeedUp,        // speeding up by 10 %\r\n        SlowDown,       // slowing down by 10 %\r\n\r\n        TurnLeft,       // turn as a continuous rotation\r\n        TurnRight,      // the rotation will be stopped by\r\n        TurnOff,        // a movement message or the stop message\r\n\r\n        Stretch,        // stretch or shrink the body\r\n        Angle,          // angle of the wheels to the floor\r\n\r\n        Leds,           // set the color of the leds\r\n\r\n        NotImplemented  // standard actions\r\n    }\r\n\r\n    let MESSAGE: number = -1\r\n    let PAUSE: boolean = false\r\n\r\n    ///////////////////////////////\r\n    // CONTROLLING THE XGO RIDER //\r\n    ///////////////////////////////\r\n\r\n    let MOVEMENT: number = Message.Stop // the latest movement message\r\n\r\n    // Speed range:\r\n    // ------------\r\n    // Value: 0 to 100 (in %)\r\n    // Message: 1000 to 1100\r\n    let SPEED: number = 50\r\n\r\n    // Stretch range:\r\n    // --------------\r\n    // Value: -20 to 20 (in mm)\r\n    // Message: 500 to 540\r\n    let STRETCH: number = 0\r\n\r\n    // Angle range:\r\n    // --------------\r\n    // Value: -100 to 100 (in degr)\r\n    // Message: 700 to 800\r\n    let ANGLE: number = 0\r\n\r\n    // Led colors:\r\n    // -----------\r\n    let LEDS: number = 0\r\n    let COLOR: Color = Color.Black\r\n\r\n    ///////////////////////////////\r\n    // MESSAGE HANDLING ROUTINES //\r\n    ///////////////////////////////\r\n\r\n    function handleMessage() {\r\n\r\n        // A leader sends its movements to the followers\r\n        if (Wave.isLeader()) {\r\n            let msec = Wave.readWait()\r\n            if (MESSAGE != Message.Stop && msec > 0)\r\n                radio.sendNumber(10000 + msec) // treat wave as Message.Wait\r\n            radio.sendNumber(MESSAGE)\r\n        }\r\n\r\n        // Instead of 'Message.Wait', this message is submitted by\r\n        // the calculated value of '10000 + wait time'.\r\n        let wait = 0\r\n        if (MESSAGE >= 10000) {\r\n            wait = MESSAGE - 10000\r\n            MESSAGE = Message.Wait\r\n        }\r\n\r\n        // Instead of 'Message.Led', this message is submitted by\r\n        // the calculated value of '2000 + Led value * 20 + Color value'.\r\n        if (MESSAGE >= 2000) {\r\n            let val = MESSAGE - 2000\r\n            LEDS = Math.floor(val / 30)\r\n            COLOR = val - LEDS * 30\r\n            MESSAGE = Message.Leds\r\n        }\r\n\r\n        // Instead of 'Message.Speed', this message is submitted by\r\n        // the calculated value of '1000 + required speed'.\r\n        if (MESSAGE >= 1000) {\r\n            SPEED = MESSAGE - 1000\r\n            // reactivate the latest movement message\r\n            MESSAGE = MOVEMENT\r\n        }\r\n\r\n        // Instead of 'Message.Angle', this message is submitted by\r\n        // the calculated value of '600 + required angle'.\r\n        if (MESSAGE >= 600) {\r\n            ANGLE = MESSAGE - 700\r\n            // reactivate the latest movement message\r\n            MESSAGE = Message.Angle\r\n        }\r\n\r\n        // Instead of 'Message.Stretch', this message is submitted by\r\n        // the calculated value of '500 + required height'.\r\n        if (MESSAGE >= 500) {\r\n            STRETCH = MESSAGE - 520\r\n            // reactivate the latest movement message\r\n            MESSAGE = Message.Stretch\r\n        }\r\n\r\n        // If needed, pause a while to get a wave effect\r\n        // Message.Stop is excluded from the wave behaviour.\r\n        if (Wave.readWait() > 0 && MESSAGE != Message.Stop)\r\n            basic.pause(Wave.readWait())\r\n\r\n        // Handle the messages\r\n        switch (MESSAGE) {\r\n            case Message.Stop:\r\n                xgo.stopMoving()\r\n                break\r\n            case Message.Wait:\r\n                basic.pause(wait * 1000)\r\n                break\r\n            case Message.Pause:\r\n                xgo.stopMoving()\r\n                PAUSE = true\r\n                break\r\n            case Message.Continue:\r\n                PAUSE = false\r\n                break\r\n            //\r\n            // MOVEMENT CONTROL\r\n            //\r\n            case Message.Forward:\r\n                MOVEMENT = Message.Forward\r\n                xgo.rotateRider(Rotate.Clockwise, 0)\r\n                xgo.moveRider(Move.Forward, SPEED)\r\n                break\r\n            case Message.Backward:\r\n                MOVEMENT = Message.Backward\r\n                xgo.rotateRider(Rotate.Clockwise, 0)\r\n                xgo.moveRider(Move.Backward, SPEED)\r\n                break\r\n            case Message.TurnLeft:\r\n                MOVEMENT = Message.TurnLeft\r\n                xgo.moveRider(Move.Forward, 0)\r\n                xgo.rotateRider(Rotate.AntiClockwise, SPEED)\r\n                break\r\n            case Message.TurnRight:\r\n                MOVEMENT = Message.TurnRight\r\n                xgo.moveRider(Move.Forward, 0)\r\n                xgo.rotateRider(Rotate.Clockwise, SPEED)\r\n                break\r\n            case Message.TurnOff:\r\n                MOVEMENT = Message.TurnOff\r\n                xgo.rotateRider(Rotate.Clockwise, 0)\r\n                break\r\n            case Message.SpeedUp:\r\n                SPEED += 10\r\n                if (SPEED > 100) SPEED = 100\r\n                // call handleMessage recursively to activate the speed\r\n                MESSAGE = MOVEMENT\r\n                handleMessage()\r\n                break\r\n            case Message.SlowDown:\r\n                SPEED -= 10\r\n                if (SPEED < 0) SPEED = 0\r\n                // call handleMessage recursively to activate the speed\r\n                MESSAGE = MOVEMENT\r\n                handleMessage()\r\n                break\r\n            case Message.Stretch:\r\n                xgo.setHeight(STRETCH)\r\n                break\r\n            case Message.Angle:\r\n                xgo.setAngle(ANGLE)\r\n                break\r\n            //\r\n            // LED CONTROL\r\n            //\r\n            case Message.Leds:\r\n                xgo.ledColor(LEDS, COLOR)\r\n                break;\r\n            //\r\n            // STANDARD ACTIONS\r\n            //\r\n            case Message.NotImplemented:\r\n                break\r\n        }\r\n        MESSAGE = -1\r\n    }\r\n\r\n    ////////////////////////\r\n    // PROGRAMMING BLOCKS //\r\n    ////////////////////////\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"turn %led to %color\"\r\n    //% block.loc.nl=\"maak %led %color\"\r\n    export function led(led: Led, color: Color) {\r\n        MESSAGE = 2000 + led * 30 + color\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"stretch %height mm\"\r\n    //% block.loc.nl=\"strek %height mm\"\r\n    //% height.min=0 height.max=20 height.defl=0\r\n    export function stretch(height: number) {\r\n        MESSAGE = 520 + height\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"shrink %height mm\"\r\n    //% block.loc.nl=\"krimp %height mm\"\r\n    //% height.min=0 height.max=20 height.defl=0\r\n    export function shrink(height: number) {\r\n        MESSAGE = 520 - height\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"lean %angle ° to the left\"\r\n    //% block.loc.nl=\"hel %angle ° over naar links\"\r\n    //% angle.min=0 angle.max=45 angle.defl=0\r\n    export function leanLeft(angle: number) {\r\n        MESSAGE = 700 + 2 * angle\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% subcategory=\"Effecten\" color=\"#82705C\"\r\n    //% block=\"lean %angle ° to the right\"\r\n    //% block.loc.nl=\"hel %angle ° over naar rechts\"\r\n    //% angle.min=0 angle.max=45 angle.defl=0\r\n    export function leanRight(angle: number) {\r\n        MESSAGE = 700 - 2 * angle\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"continue\"\r\n    //% block.loc.nl=\"einde pauze\"\r\n    export function pauseOff() {\r\n        MESSAGE = Message.Continue\r\n        handleMessage()\r\n    }\r\n\r\n    //% block=\"pause\"\r\n    //% block.loc.nl=\"begin pauze\"\r\n    export function pauseOn() {\r\n        MESSAGE = Message.Pause\r\n        handleMessage()\r\n    }\r\n\r\n    //% block=\"stop\"\r\n    //% block.loc.nl=\"stop\"\r\n    export function stop() {\r\n        MESSAGE = Message.Stop\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"turn %rotation\"\r\n    //% block.loc.nl=\"draai %rotation\"\r\n    export function turn(rotation: Rotate) {\r\n        switch (rotation) {\r\n            case Rotate.AntiClockwise: MESSAGE = Message.TurnLeft; break;\r\n            case Rotate.Clockwise: MESSAGE = Message.TurnRight; break;\r\n        }\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"ride %movement\"\r\n    //% block.loc.nl=\"rijd %movement\"\r\n    export function move(movement: Move) {\r\n        switch (movement) {\r\n            case Move.Forward: MESSAGE = Message.Forward; break;\r\n            case Move.Backward: MESSAGE = Message.Backward; break;\r\n        }\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n    //% block=\"set speed to %speed \\\\%\"\r\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\r\n    //% speed.min=0 speed.max=100 speed.defl=50\r\n    export function setSpeed(speed: number) {\r\n        MESSAGE = 1000 + speed;\r\n        if (!PAUSE) handleMessage()\r\n    }\r\n\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1757753837933}